/**
 * @file     synTag.cpp
 * @brief    Classify synonyms to each class.
 *           Such as INVALID,NUM,LETTER...
 * @details  ...
 * @author   yinxusen@baidu.com
 * @date     2012-3-23
 **/
#include "isegment.h"
#include <stdio.h>
#include <vector>
#include <string>
#include <map>
#include <set>
#include <iostream>
#include <fstream>

using namespace std;

#define MAX_WORD_LEN 256
#define MAX_TERM_COUNT 256

enum SynWordType {INVALID, NUM, LETTER, TYPEERR, OTHERNAME, SYN, SHORTNAME, FULLNAME, OMIT, EXTEND,OTHER};

class WordValue;
class SynWordValue;

set<string> numbers;
set<string> letters;
map<string, WordValue > wordInfo;
map<string, SynWordValue > synWords;
vector<string> typeName;
scw_worddict_t* pscwdict;
scw_out_t* pscwout;

bool ReadFileToSet(string & file, set<string> & fileSet);

class WordQueryInfo {
	public:
		int singleWQN;
		int totalNum;
		// int inTitleNum;
		double postion;
		int id;
		map<int, double> context;
};

class WordValue {
	public:
		set<string> bagOfWordContext;
		set<string> synWords;
		set<string> POSs;
		string correctWord;
		int maxFreq;
};

class SynWordValue {
	public:
		map<string, WordValue>::iterator word1;
		map<string, WordValue>::iterator word2;
		set<string> slotContext;
		int count;
		double overlap;
		bool posFilter;
		SynWordType synType;
		unsigned int filterType;
};

void scw_dump_out(scw_out_t* pout, vector<string> & segmentRet) {
	size_t i, pos, len;
	char word[MAX_WORD_LEN];
	for(i = 0; i < pout->wsbtermcount; ++i) {
		pos = GET_TERM_POS(pout->wsbtermpos[i]);
		len = GET_TERM_LEN(pout->wsbtermpos[i]);
		strncpy(word, pout->wordsepbuf+pos, len);
		word[len] = 0;
		if(word[0] == ' ') {
			continue;
		}
		segmentRet.push_back(string(word));
	}
}

int segment(const char* input, int len, vector<string> & segmentRet) {
	segmentRet.clear();
	scw_segment_words(pscwdict, pscwout, input, len);
	scw_dump_out(pscwout, segmentRet);
	return 0;
}

int load() {
	string numFile = "numbers";
	string letterFile = "letters";
	string wordDict = "worddict";
	pscwdict = scw_load_worddict(wordDict.c_str());
	pscwout = scw_create_out(MAX_TERM_COUNT * 50, SCW_OUT_ALL | SCW_OUT_PROP);
	ReadFileToSet(numFile, numbers);
	ReadFileToSet(letterFile, letters);
	typeName.push_back("INVALID");
	typeName.push_back("NUM");
	typeName.push_back("LETTER");
	typeName.push_back("TYPEERR");
	typeName.push_back("OTHERNAME");
	typeName.push_back("SYN");
	typeName.push_back("SHORTNAME");
	typeName.push_back("FULLNAME");
	typeName.push_back("OMIT");
	typeName.push_back("EXTEND");
	typeName.push_back("OTHER");
	return 0;
}

void addVectorToMap(vector<string> & svec, map<string, int> & dmap) {
	map<string, int>::iterator mapIt;
	for(size_t i = 0; i < svec.size(); ++i) {
		if((mapIt = dmap.find(svec[i])) != dmap.end()) {
			mapIt->second++;
		} else {
			dmap[svec[i]] = 1;
		}
	}
}

void SplitStr(vector<string> & vecToken, const string & str, string & separator) {
	size_t pos1, pos2;
	string token;
	size_t len = separator.length();
	pos1 = pos2 = 0;
	vecToken.clear();
	while((pos2 = str.find(separator.c_str(), pos1)) != string::npos) {
		token = str.substr(pos1, pos2-pos1);
		pos1 = pos2+len;
		vecToken.push_back(token);
	}
	token = str.substr(pos1);
	vecToken.push_back(token);
}

bool ReadFileToSet(string & file, set<string> & fileSet) {
	fileSet.clear();
	ifstream inf(file.c_str());
	if(!inf) {
		cerr << "Error: Cannot open file '" << file
			<< "' in function ReadFileToSet." << endl;
		return false;
	}
	string line;
	while(getline(inf, line)) {
		fileSet.insert(line);
	}
	inf.close();
	return true;
}
void getCharacterFromWord(string & word, vector<string> & vecCha) {
	for(size_t j = 0; j < word.length(); ++j) {
		if((int)word[j] >=0) {
			vecCha.push_back(word.substr(j,1));
		} else if(j+1 < word.length()) {
			vecCha.push_back(word.substr(j,2));
			++j;
		}
	}
}
SynWordType numLetterJudge(string & word1, string & word2) {
	vector<string> vecCha1, vecCha2;
	bool haveNum1, haveNum2, haveLetter1, haveLetter2;
	haveNum1 = haveNum2 = haveLetter1 = haveLetter2 = false;
	getCharacterFromWord(word1, vecCha1);
	getCharacterFromWord(word2, vecCha2);
	string nonNumLetterStr1, nonNumLetterStr2;

	for(size_t i=0; i< vecCha1.size(); ++i) {
		if(numbers.find(vecCha1[i]) != numbers.end()) {
			haveNum1 = true;
			continue;
		}
		if(letters.find(vecCha1[i]) != letters.end()) {
			haveLetter1 = true;
			continue;
		}
		nonNumLetterStr1 += vecCha1[i];
	}
	for(size_t i=0; i< vecCha2.size(); ++i) {
		if(numbers.find(vecCha2[i]) != numbers.end()) {
			haveNum2 = true;
			continue;
		}
		if(letters.find(vecCha2[i]) != letters.end()) {
			haveLetter2 = true;
			continue;
		}
		nonNumLetterStr2 += vecCha2[i];
	}

	if((haveLetter1 && haveLetter2 && nonNumLetterStr1 == nonNumLetterStr2) 
			|| (haveLetter1 ^ haveLetter2)) {
		return LETTER;
	}
	if((haveNum1 && haveNum2 && nonNumLetterStr1 == nonNumLetterStr2) 
			|| (haveNum1 ^ haveNum2)) {
		return NUM;
	}
	return OTHER;
}

SynWordType typeErrorJudge(string & word1, string & word2) {
	map<string, WordValue >::iterator wordIt1 = wordInfo.find(word1);
	map<string, WordValue >::iterator wordIt2 = wordInfo.find(word2);
	if(wordIt1->second.correctWord != "" && wordIt2->second.correctWord != "") {
		if(wordIt1->second.correctWord == wordIt2->second.correctWord) {
			return TYPEERR;
		} else {
			return OTHER;
		}
	} else if(wordIt1->second.correctWord == "" && wordIt2->second.correctWord != "") {
		if(word1 == wordIt2->second.correctWord) {
			return TYPEERR;
		} else {
			return OTHER;
		}
	} else if(wordIt1->second.correctWord != "" && wordIt2->second.correctWord == "") {
		if(wordIt1->second.correctWord == word2) {
			return TYPEERR;
		} else {
			return OTHER;
		}
	}
	return OTHER;
}

SynWordType diffLengthClassJudge(string & word1, string &word2) {
	string longWord, shortWord;
	bool word1Long = true;
	if(word1.length() > word2.length()) {
		longWord = word1;
		shortWord = word2;
	} else if(word1.length() < word2.length()) {
		longWord = word2;
		shortWord = word1;
	} else {
		return OTHER;
	}
	vector<string> shortWords;
	vector<string> longWords;
	segment(shortWord.c_str(), shortWord.length(), shortWords);
	segment(longWord.c_str(), longWord.length(), longWords);
	map<string, int> longMap;
	addVectorToMap(longWords, longMap); // 统计每个词出现的次数

	size_t i;
	for(i=0; i < shortWords.size();++i) {
		if(longMap.find(shortWords[i]) == longMap.end()) {
			break;
		}
	}
	if(i == shortWords.size()) {
		return word1Long ? OMIT : EXTEND;
	}

	vector<string> vecCha;
	getCharacterFromWord(shortWord, vecCha);
	for(i = 0; i < vecCha.size(); ++i) {
		if(longWord.find(vecCha[i]) == string::npos) {
			return OTHER;
		}
	}
	return word1Long ? SHORTNAME : FULLNAME;
}

/*
SynWordType otherNameSYNJudge(string & word1, string word2, ) {
}
*/

SynWordType judge(string & word1, string & word2, set<string> & context, map<string, WordQueryInfo> wordQueryMap) {
	SynWordType typeRet;
	if((typeRet = diffLengthClassJudge(word1,word2)) !=OTHER) {
		return typeRet;
	}else if((typeRet = numLetterJudge(word1,word2)) !=OTHER) {
		return typeRet;
	}else if((typeRet = typeErrorJudge(word1,word2)) !=OTHER) {
		return typeRet;
	}
	return OTHER;
	// return otherNameSYNJudge(word1,word2,wordQueryMap);
}

void ClassifySYNWords(string & synFileName, string & outputFile) {
	vector<string> vec;
	string separator = "\t";
	ifstream synWordFile(synFileName.c_str());
	string buf;
	map<string, WordValue >::iterator wordIt1, wordIt2;
	while(getline(synWordFile, buf)) {
		SplitStr(vec, buf, separator);
		if(vec.size() < 2) {
			cerr << "Wrong format of syn word in function classifySYNWords " << buf << endl;
			exit(-1);
		}
		wordIt1 = wordInfo.find(vec[0]);
		if(wordIt1 == wordInfo.end()) {
			WordValue tmp;
			wordInfo.insert(pair<string, WordValue>(vec[0], tmp));
		}
		wordIt2 = wordInfo.find(vec[1]);
		if(wordIt2 == wordInfo.end()) {
			WordValue tmp;
			wordInfo.insert(pair<string, WordValue>(vec[1], tmp));
		}
		SynWordValue synTemp;
		synTemp.word1 = wordIt1;
		synTemp.word2 = wordIt2;
		synTemp.count = atoi(vec[2].c_str());
		string wordPair = vec[0]+"\t"+vec[1];
		synWords[wordPair] = synTemp;
	}
	map<string, WordQueryInfo> wordQueryMap;
	for(map<string, SynWordValue >::iterator it = synWords.begin();
			it != synWords.end(); ++it) {
		vector<string> vec;
		string separator = "\t";
		SplitStr(vec, it->first, separator);
		if(vec.size() < 2) {
			cerr << "Wrong format of syn word in function classifySYNWords" << it->first << endl;
			exit(-1);
		}
		it->second.synType = judge(vec[0], vec[1], it->second.slotContext, wordQueryMap);
		if(it->second.synType == SYN) {
			it->second.synType = OTHER; // why?
		}
	}

	ofstream output(outputFile.c_str());
	for(map<string, SynWordValue >::iterator it = synWords.begin();
			it != synWords.end(); ++it) {
		output << it->first;
		output << "\t" << it->second.count << "\t" << typeName[(int)it->second.synType] << endl;
	}
	output.close();
	synWordFile.close();
}

int main() {
	load();
	string synInf = "syn.all";
	string synOuf = "synClass.all";
	ClassifySYNWords(synInf, synOuf);
	return 0;
}
